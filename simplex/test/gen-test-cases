#!/usr/bin/env python

from collections import Counter
from pytket import Circuit
from pytket.utils import probs_from_state

circuits = [
    """
    H 0
    CX 0 1""",
    """
    H 0
    CX 0 1
    CX 0 2""",
    """
    H 1
    CX 1 2
    CZ 2 0
    S 0
    CX 0 2
    H 1
    Sdg 1
    S 0
    CX 1 0""",
    """
    H 0
    H 1
    H 2""",
    """
    H 1
    X 0
    CX 1 0""",
    """
    Y 0
    H 1
    CX 1 2
    Sdg 2
    CZ 0 2
    Z 0
    S 1
    CX 1 0""",
    """
    H 0
    H 1
    H 2
    Sdg 1
    CZ 0 1
    S 1
    CZ 1 2
    H 0
    H 1
    H 2""",
    """
    X 0
    H 0
    CX 0 1
    S 1
    Y 2
    CZ 1 2
    H 2
    Sdg 0
    Z 2
    Y 2
    CX 2 0""",
    """
    H 0
    H 1
    H 2
    H 3
    CZ 0 1
    CZ 2 3
    H 0
    H 1
    H 2
    H 3
    CZ 0 2
    CZ 1 3
    H 0
    H 1
    H 2
    H 3
    CZ 0 3
    CZ 1 2
    H 0
    H 1
    H 2
    H 3
    CZ 0 1
    CZ 1 2
    CZ 1 3
    H 0
    H 1
    H 2
    H 3
    """,
    """
    H 0
    CX 0 1
    CZ 0 1
    H 0
    H 1
    """,
]


def cmd_list(circuit):
    cmds = []
    n = 0
    for line in circuit.strip().split("\n"):
        elts = line.strip().split(" ")
        op = elts[0]
        args = list(map(int, elts[1:]))
        cmds.append((op, args))
        max_arg = max(args) + 1
        if max_arg > n:
            n = max_arg
    return cmds, n


# Return a (non-exhaustive) list of measurement bases of length n for testsing
def meas_bases(n):
    paulis = ["X", "Y", "Z"]
    bases = [[pauli] * n for pauli in paulis]
    bases.append([paulis[i % 3] for i in range(n)])
    bases.append([paulis[(i + 1) % 3] for i in range(n)])
    bases.append([paulis[(i + 2) % 3] for i in range(n)])
    return bases


def calculate_dist(cmds, n, meas_basis):
    assert len(meas_basis) == n
    c = Circuit(n)
    for op, args in cmds:
        if op == "X":
            c.X(*args)
        elif op == "Y":
            c.Y(*args)
        elif op == "Z":
            c.Z(*args)
        elif op == "H":
            c.H(*args)
        elif op == "S":
            c.S(*args)
        elif op == "Sdg":
            c.Sdg(*args)
        elif op == "CX":
            c.CX(*args)
        elif op == "CZ":
            c.CZ(*args)
        else:
            raise ValueError(f"Unexpected op '{op}'")
    for i in range(n):
        m = meas_basis[i]
        if m == "X":
            c.H(i)
        elif m == "Y":
            c.Sdg(i)
            c.H(i)
        else:
            assert m == "Z"
    s = c.get_statevector()
    p = probs_from_state(s)
    pow2n = pow(2, n)
    ctr = Counter()
    for k, v in p.items():
        ctr[k] += int(pow2n * v + 0.5)
    return ctr


def write_test(testfn, cmds, n, basis, dist):
    print(f"static int {testfn}() {{")
    print(f"  Simplex S({n});")
    for op, args in cmds:
        print(f"  S.{op}({', '.join(str(i) for i in args)});")
    # Represent the counter as a vector v of unsigned of length 2^n, where the index
    # encodes the readout in little-endian binary form, e.g. v[6] is the count for
    # (0,1,1).
    N = pow(2, n)
    print(f"  std::vector<unsigned> v({N}, 0);")
    print(f"  for (unsigned m = 0; m < {N}; m++) {{")
    print("    Simplex T(S);")
    print("    unsigned c = 0;")
    for i in range(n):
        print(f"    c += T.Meas{basis[i]}({i}, (m >> {i}) & 1) << {i};")
    print("    v[c]++;")
    print("  }")
    # Now check v against dist
    for c in range(N):
        print(f"  CHECK(v[{c}] == {dist[tuple((c >> i) & 1 for i in range(n))]});")
    print("  return 0;")
    print("}")


if __name__ == "__main__":
    testfns = []
    for (i, circuit) in enumerate(circuits):
        cmds, n = cmd_list(circuit)
        bases = meas_bases(n)
        for (j, basis) in enumerate(bases):
            dist = calculate_dist(cmds, n, basis)
            testfn = f"test_dist_{i}_{j}"
            write_test(testfn, cmds, n, basis, dist)
            testfns.append(testfn)
    for testfn in testfns:
        print(f"CHECK_OK({testfn}());")
